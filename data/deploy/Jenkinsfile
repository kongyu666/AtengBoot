pipeline {
    // 说明：该Jenkinsfile定制KubeSphere的DevOps的多分支流水线，并且Git仓库必须使用SSH的方式，请提前在Git仓库配置好相应的秘钥

    // 指定运行的镜像，标签带有: devops kongyu
    agent {
        node {
            label 'devops && kongyu && jdk21'
        }
    }

    // 手动运行发布版本时使用
    parameters {
        string(name: 'TAG_NUMBER', defaultValue: '0.0.1', description: '请输入版本号')
        booleanParam(name: 'IS_ARTIFACT', defaultValue: false, description: '是否保存制品')
    }

    // 设置环境变量
    environment {
        // K8S的令牌
        KUBECONFIG_CREDENTIAL_ID = 'kubeconfig'
        // Harbor仓库的账号密码认证
        DOCKER_CREDENTIAL_ID = 'harbor'
        // Harbor仓库的地址
        REGISTRY_ADDRESS = 'registry.lingo.local'
        // Harbor仓库的命名空间(项目)
        REGISTRY_NAMESPACE = 'longxing'
        // 容器镜像名称
        APP_NAME = 'facility-backend'
    }

    stages {

        stage('查看环境信息') {
            steps {
                container('devops-kongyu') {
                    sh """
                    echo "当前分支BRANCH_NAME=$BRANCH_NAME"
                    echo "版本号TAG_NUMBER=$TAG_NUMBER"
                    echo "是否保存制品IS_ARTIFACT=$IS_ARTIFACT"
                    date +'%Y-%m-%d %H:%M:%S'
                    pwd
                    ls -l
                    env
                    """
                }
            }
        }

        stage('构建镜像并推送至仓库') {
            steps {
                container('devops-kongyu') {
                    sh '''
                    mvn -Dmaven.test.skip=true clean package
                    docker build -f Dockerfile -t $REGISTRY_ADDRESS/$REGISTRY_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER .
                    '''
                    withCredentials([
                            usernamePassword(
                                    passwordVariable: 'DOCKER_PASSWORD',
                                    usernameVariable: 'DOCKER_USERNAME',
                                    credentialsId: "$DOCKER_CREDENTIAL_ID"
                            )
                    ]) {
                        sh '''
                        echo "$DOCKER_PASSWORD" | docker login $REGISTRY_ADDRESS -u "$DOCKER_USERNAME" --password-stdin
                        docker push $REGISTRY_ADDRESS/$REGISTRY_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER
                        '''
                    }
                }

                // 保存制品文件
                script {
                    // 获取参数值
                    def isArtifact = params.IS_ARTIFACT
                    // 根据参数执行不同的构建操作
                    if (isArtifact) {
                        archiveArtifacts(artifacts: 'target/*.jar', followSymlinks: false)
                    }
                }

            }
        }

        stage('部署到K8S(根据分支区分环境)') {
            parallel {
                stage('部署到测试环境到K8S') {
                    when {
                        branch 'master'
                    }
                    steps {
                        echo '部署到测试(生产)环境到K8S'
                        container('devops-kongyu') {
                            withCredentials([
                                    kubeconfigFile(
                                            credentialsId: env.KUBECONFIG_CREDENTIAL_ID,
                                            variable: 'KUBECONFIG'
                                    )
                            ]) {
                                sh '''
                                envsubst < k8s-deploy.yaml | kubectl apply -f -
                                '''
                            }
                        }
                    }
                }
                stage('部署到演示环境到K8S') {
                    when {
                        branch 'demo'
                    }
                    steps {
                        echo '部署到演示环境到K8S'
                        container('devops-kongyu') {
                            withCredentials([
                                    kubeconfigFile(
                                            credentialsId: env.KUBECONFIG_CREDENTIAL_ID,
                                            variable: 'KUBECONFIG'
                                    )
                            ]) {
                                sh 'envsubst < k8s-deploy-demo.yaml | kubectl apply -f -'
                            }
                        }
                    }
                }
            }
        }

/*        stage('推送latest镜像至仓库') {
            when {
                branch 'master'
            }
            steps {
                container('devops-kongyu') {
                    sh '''
                    docker tag $REGISTRY_ADDRESS/$REGISTRY_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER $REGISTRY_ADDRESS/$REGISTRY_NAMESPACE/$APP_NAME:latest
                    docker push $REGISTRY_ADDRESS/$REGISTRY_NAMESPACE/$APP_NAME:latest
                    '''
                }

            }
        }*/

        stage('发布带有标签的版本') {
            when {
                expression {
                    return params.TAG_NUMBER =~ /v.*/
                }
            }
            steps {
                container('devops-kongyu') {
                    // 请使用SSH的方式访问Git仓库，这样才能通过非交互式访问Git仓库
                    sh '''
                    export formattedDate=$(date +'%Y%m%d')
                    git config --global user.name "孔余"
                    git config --global user.email "2385569970@qq.com"
                    git config --global --add safe.directory $WORKSPACE
                    git tag -a $BRANCH_NAME-$TAG_NUMBER-$formattedDate -m "version $BRANCH_NAME-$TAG_NUMBER-$formattedDate"
                    git push --tags -f
                    git ls-remote --tags
                    '''
                    // 推送镜像
                    sh '''
                    export formattedDate=$(date +'%Y%m%d')
                    docker tag $REGISTRY_ADDRESS/$REGISTRY_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER $REGISTRY_ADDRESS/$REGISTRY_NAMESPACE/$APP_NAME:$BRANCH_NAME-$TAG_NUMBER-$formattedDate
                    docker push $REGISTRY_ADDRESS/$REGISTRY_NAMESPACE/$APP_NAME:$BRANCH_NAME-$TAG_NUMBER-$formattedDate
                    '''
                }
            }
        }

    }
}

